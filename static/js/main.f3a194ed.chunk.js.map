{"version":3,"sources":["components/Navbar/Navbar.js","components/Container/Container.js","components/Card/Card.js","components/SmallNav/SmallNav.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","id","className","this","score","tscore","msg","Component","Contain","children","Card","onClick","handleClick","bind","src","data","alt","SmallNav","App","state","topScore","message","cards","Images","isClicked","_this","find","image","clicked","setState","shufflearr","resetArray","shuffled","array","i","length","j","Math","floor","random","_ref","crateCard","map","e","components_Card_Card","key","bool","forEach","Fragment","components_SmallNav_SmallNav","components_Navbar_Navbar","Container_Container","clickFunc","top","changeTopScore","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3a194ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n  render(props) {\r\n    return (\r\n      <div>\r\n        <ul id=\"sidenav-1\" className=\"sidenav sidenav-fixed\">\r\n          <li>\r\n            <div className=\"score-bored\">\r\n              <h3>Kingdom <br />Hearts <br />Click</h3>\r\n              <hr />\r\n              <p>Score: <span className=\"score\">{this.props.score}</span></p>\r\n              <p>Top Score: <span className=\"top-score\">{this.props.tscore}</span></p>\r\n              <div className=\"box\">\r\n                <h5><u>Message</u>:</h5>\r\n                <p>{this.props.msg}</p>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport \"./Container.css\";\r\n\r\n\r\nclass Contain extends Component {\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"contain\">\r\n            <div className=\"row\">\r\n                {this.props.children}\r\n            </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\nexport default Contain;\r\n  ","import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n        <div className=\"col s6 m3 center\">\r\n            <div className=\"card\" onClick={this.props.handleClick.bind(this, this.props.id)} >\r\n                <div className=\"card-image\">\r\n                    <img src={this.props.data} alt=\"card\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport './SmallNav.css';\r\n\r\nclass SmallNav extends Component {\r\n  render() {\r\n    return (\r\n        <div className=\"left-nav-md hide-on-med-and-up topnavcls\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 center\">\r\n                    <h5 className=\"small-title\">Kingdom Hearts Click</h5>\r\n                </div>\r\n                <div className=\"col s12 center\">\r\n                    <div className=\"score-bored-small row\">\r\n                        <p className=\"col s6 center\">Score: <span className=\"score\">{this.props.score}</span></p>\r\n                        <p className=\"col s6 center\">Top Score: <span className=\"top-score\">{this.props.tscore}</span></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SmallNav;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Container from \"./components/Container\";\nimport Card from \"./components/Card\";\nimport SmallNav from \"./components/SmallNav\";\nimport Images from \"./imglist.json\";\n\nclass App extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    message: \"Click image to score, but make sure you don't click the same one twice...\",\n    cards: Images\n  }\n\n  handleClick = (id) => {\n    const isClicked = this.state.cards.find(image => image.id === id);\n\n    \n    if (isClicked.clicked) {\n      if (this.state.score > this.state.topScore) {\n        this.setState({ topScore: this.state.score})\n      }\n      this.setState({score: 0, message: \"You guessed incorrectly!\", cards: this.shufflearr(this.resetArray(this.state.cards))});\n    } else {\n      isClicked.clicked = true;\n      let shuffled = this.shufflearr(this.state.cards);\n      this.setState({ score: this.state.score + 1}, () => {\n        if (this.state.score === 12) {\n          this.setState({ score: 0, topScore: 0, message: \"You won!\", cards: this.resetArray(this.state.cards) });\n        } else {\n          this.setState({ message: \"You guessed correctly!\", cards: shuffled });\n        }\n      })\n      \n    }\n  }\n\n  shufflearr = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array\n  }\n\n  crateCard = () => {\n    let array = this.state.cards.map((e) => (<Card id={e.id} key={e.id} data={e.image} handleClick={this.handleClick} bool={e.clicked} />))\n    return array\n  }\n\n  resetArray = array => {\n    array.forEach(e => {  e.clicked = false});\n    return array;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <SmallNav score={this.state.score} tscore={this.state.topScore} />\n        <Navbar score={this.state.score} tscore={this.state.topScore} msg={this.state.message}/>\n        <Container clickFunc={this.handleClick} top={this.changeTopScore}>\n          {this.shufflearr(this.crateCard())}\n        </Container>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}